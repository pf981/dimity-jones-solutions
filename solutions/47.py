# import collections
import decrypter

# text = """IFWSHIPMHTCSGHHMPHMIBCGSPPCSGCCPBBCSFWHTTCGBTSGPMIWMHFGTCFSCFHGTFIHSSP
# HFTIHWFIPBCIHCHBFSMIIFTSFSCBBMGSTTPSWBFPTFPHMMHGMGHIIGISFTGBFWMBSIGMCS
# WWTBTSGHHGWIBTFMHGGIBBHBSMGBCWHFIISCIHHSTMCSWIWHMCFCPFSCHBBCWPSPPPWWHT
# SSCMBCWBMFFMBIPPGWMWSPHTWFBBWCPCMWMBHCHGIGFTTGGPHWSCSIGCPGGBHIGPSCMMBG
# THMBCMCSGBBBIMWFIMFITHWGTCGGWGFSHBHCGIGTTMFTMCSSTWFSBHBIIIMBPCITPGTCPS
# HWBGWSBSCSMTSSFWMMPHMCMGGBMGISIPFBCPIISTHMFFMSBTHMTBCMWHCCIGGTBPHGFFFH
# WWSBWBWPSMMHWPSTTMIPMBBSCSPBFMPHITBWSMSGFPCWFFBHMWHTFHBBFGFTIBIIHSFGIP
# GFGMWPPWSIWBHBITSGGMTTBWPCTSFTHCPTFHSMGICWMWICIBBTCCTMGGGSPHCMHGFGFTMM
# BMFSMMSFGFFWBSSWFPSIWFFTHWTSHPHPTFGCPBTPPCSCISPFGSIBTPCGTFCBPMBSFMTCIT
# WSHCBSICFTPWSTPWWHSGWIHMTBIFHFWGGTWGSBWIIMICMHSIHHPPMMFCBMWPPIIWHCHCMG
# MHSCICGPTHWGPISGFSGICTITWTHWCGIIMBPFHSCISPMGFWPMMGBSPPWTHHPPMMSMWHITIP
# IIIBGWIWHBPHMBHBGIITMGPHCWWSMSSPFWPWICWSWBTPSWWIMIHBTFCGGSIWHIISBSWPPI
# SWIGCSFSWPHIWTWCPHGHMGSGIWBGBTISTMPMFGTTSPGTPWFTCSMMTPWBFMFTCBPCMGWCSC
# BTFGWFCWMBFCMSFSIGMGBWBGTSWSSHMTFPTIICMSBGTSWHFFPBPCIIIBGHPPHWHFFWSGWG
# TPIWSMSMPMHWCHSCIHITWWCSTPCGPMGBHTCICHCIPGHTHFWGMMMCMSCMIBWIPBMTTPWMWT
# GMCIBIBPMPHTFTHTHSCSBTHSBIMBBWICTPIFSSCWWBCHTHFCCPFCPMTTPGSCCBGISGMHCG
# SHTHMBIMPWMWMCTIFWPWWCFMWMFIMHBWSGGBHBIPWCPBBHFIGHBCGTFFFCSCBHHSWTGSTC
# GWWBTHMBSGIBHGISGSSPCBISFICMMMWBPTPWTMHFCSWPWTGITTGCCWIGIHBGCTMHSIMIPH
# GBPMCCWSMGTIIWMMGWIBSSTISWGCCSIFSGTGFGPWWMGWFTTCMCGBFIGCBMSTBTSBWSFSBG
# MGFSSBFCWCWCBMWBFSMMWBFBGFIHBIPPPIGSBBHGGGBFMGHWICGSGGGSHTTPCMHPGTCITW
# CWMCSCPBFTSHGHFFWSGSPBSTMMTGGMBWWTPSSSCFHSHTGTMHFGFBSTGMGMIHSWHBWWCHFW
# WWHIWBMCFFHHHIIIWMIFIWCSFMPSGFWBGFFGMFIWTFFIGTICPFTBHBCPTMTTFSHITPCCGI
# PHHCITSGBPIPHITBWHWMPPICBWPFMBMIHCIGHMBWTMFHFWGPWIWMFBSIFTTTTWFWBCHIFT
# GGSTWWTMMMIGBBWMFTHIFTWWFMGGGPCCISIGSWIHPMCBTIWFPPTPWPGGMHWWMBSTSMCIIM
# SIGPTGFIMPBIFBHPIMPPFWGSWBWPBBWCMTTFFSWMFSBMBTICSPFPBCWFIIMBWTIPTBPFMS
# PGPGMFGIFSWTIBFTSPGSSISHHHGCIICHHGPCMHTFFSWIHTGBSCBICCFPFMFBCCTBHGWCIP
# BSPFGBPBTTPHSCPTBFPISPIPSPTWTPSGWGFCHTSMIFFPWCWTGGCTGGSWFGHMBCCSCPBGCB
# GIIWWPBGGMCSGHTWPFSICTHBHSSMMFBMWCGGMMGGFSMPIIIBGBBSHGWTIISFHBIISHPMSS
# TIWWTTCSCSWTMSHMWFICCSITCIGIIWGHCTBGBMCHCBTTPMBBIHBPGPWGCWPMCMHCHGFBIS
# IFPCHHGMPICCBFFFHBPFGWBWBHSSHMCGPMCSTHBPTTCCCPBPSGMIGTIFMCSWSPWHMSPPPI
# FIBBPBPFPBFTFIFCGIFPBFTPFICWHITSCTPBBTPHMFSTTGICTTIPHTCPGPSHPCITHTSPBS
# PGTBCMPBSWFIMMFGBBIHHHIMTMBCBCMWMHFFMGBWCHFSGFIBSMPGGPWBHTHIHGGSHIGGMG
# ISHICIMCHWCFSIBFGBCMWGBCMFFFMIMHWTITMBMIGTPFHPMTITTHSGMIIHSCBFCPHCGFTP
# WHPTBMFGSTBCWWMFPWCIHITBMHTMGPGTWFICWBHTMFHISCSBTPTHFPIWMTBWSBFWICSBPI
# FTGTGPWPMFMPFBWCSBGGCSWMCHTBBWWWGCBMPCPTHMGWGFMGWWMSHFHPBWPFPGFWHSMSFF
# TPISBPMMMHWSCBGSTGSCFBHCGPCFFTGFIFTPWBCHFPCMMFPTWGCTFPPIIWBFBBMMBFFHMP
# MPHFWCGCFMBGPMHWFHTIWFPHSHTSIMFFTFWWPGIWPITMGMHBMWCBMFTSWHTGIIGTMBCBIB
# TBCCMFGGSGTICIFTMGFHPSWWWTTPPCWTFBBCHICMWFHBSWHCBIFGIBWIMWBCTWMGGHTHHC
# IPCSMTGFWHSPMGPFHHGPBFCGCSFGISIHIMIBWBMGCSCSTPCTHBICSWBICGTICBGPBPBTPI
# MBSFBIHSPBSCWHWPPSTGHPFTPTSIMCCSIMFGMCBCPIPBMWSPCSFCGBGTWGWHIWPFIGGHTB
# GIPPTHFBBPGFSHMTBTMHITWHSHTBFTGTFIWPHPBCCSGPIIPCICCGWHMMPICCSIIBWCCITM
# IIGIFWCBHHICFHIWWCGMWPPMGMBTSWWCFGWBSBPCWBWMTHISCFWSTGSPSTWSCCFTMGFIWH
# MCWWSFISFSFCHTPHBTFHFPWPSFPBBFFGTBMWCWISMICIITIFCBSHISCCCWTMMCCBPWMIIH
# BTGWFFFGIHPGWGBGHMBPWMCBIFPFBPMMMCGMSPIBBCMSCPHPCHIMIIBBFPSCWPSCMGGBPG
# MCWCMSIBIMCCHMIHSIFBCITMTHFSFPFBIHHSBFIIPTSHMTPPFMSCPTGPCFBHBMSFMIWSIT
# HPPCMWMMIIPGBBSTMIBICFGMFCCWBBMFWGPWPBPPIIMIFFPTFIMSTCHPMFTTMFSWPFCFWH
# BIPWTPCSPSFSSGHBIPTGMCCFGGSGPCWBMMPCTPGTBGCBWCHCMHHBIBFISBSWCPGBIWHWBC
# SSHMHTHIHWFIGMPHSGTGPIPIPGTPMHWWHFWWPSWHISTIMTBHMSWTPHIHWHFCMPHWCHBWWI
# GGTTIMISMCWIMGGMMCCHWSWGSISMBFPHSFTFIGFTPICMTHCSCTHFBMIIPTTWSSMFCHICIB
# PITCGCIHSSTMPHHFSTTCBGGWIFPBIWFFWGTSCCWHWTFHTCGCSFWTBGWMHPHBCCITGBMHTI
# BIHMPICIITCGHITWSPITSMIGBBCFCBBBMIHMWSMMMPHITHSFGHWPPWHBICHGBIHHFSHHBC
# SHWSWPMFIBBPCWIBTFFPFMFHBMCTTTSSCTBSMMPSTGSMCMFSWFPMGGIHGIFSGBWHTHHBPW
# GPGBTBCHSGSBBTIGCSICPGTPWMFGCPMTSHFHTFITBCGGMPIIPCCPITTWHWTFIFFPMGHGSI
# IPTSPWCFWFBFFTSMPCWIIHFFBBMFMPCCCFSBPCFBCBWMGBFTBFFTSBMMGFSIHMPPBWFPTH
# ITPTWICTGGWWITTCWCGSSMSFIWBHSTHPSMTPTSHGFMMGCGSTPWTMFCTHGFWIFFWFIPICFC
# CTCHGHSFCGCFTMGCTIFPTCGSTSSSGMMMBCGCTHSMWHIMCGPBWMSPIGBIBMWHIBFSSCPIMF
# HHBIMFWMCTBGSSBHWMHGIMBGBBMPCHSTIFIMSPWHIFIFCFWCCGHTCBIIGFITBFMGBHPPGH
# MPBCGIHPTCFSBMWSFSFSWGTPWMIFHWISWWSGFMIHFBMBHBFFPMPTGPWSPPICSTFITFHTHG
# MBHTIIFBHWCCTHSCPIMPPHHGMGGPSGIMISMTTBGGFBBTWHGFIFBBITSBFIHGHFFBMHHFCP
# HSIMTMWWTGTTGFIIBFBBWBPWSBFSFMMSGGIBHTWSMFWMMIWWFTWSMPFIPPFPFGGGIMMHFB
# BPCIGHGHCWHWGBMMBPIGFISIIWHBBMFMSMTGCFTIFPWGPSGSIPSMGTCSCMIGMBPCCSSBPP
# HTGFHHGCTFMIMFIMMCFGBHWWSCHCIHTMGHIBMTIWPTBIFGTPCCWMPTTGSBCFIBMFSGPCCF
# FFHWBMWHPIPSPSCMWHWIWCCWPFCGBBSTHWPMBFCSHFSCFGBHMFHPWGHWCHCTSMPIIMTHBH
# HCGWGIHGMWGBWSBHBBFGWHIWBSWTFFFSITTIGTFHIFITBSWWSGGGGTHFSTCBWSITFPIMSF
# SSPBTBGFHPTBISSHHTTHWPHPWMCPIHSCGPSPISBPGFBWSFTSGWHMSIBFPWSHSTFIBHPMGI
# PFWGGTMTPTSCFHBWFMCFPMSFSSIFGWBPGPCHBSHBSCWGPWGHCHFPWSMCWCHPTGFGHICMGT
# FIBSFPTGFIFHTBWTWPBPGTGIIICTSTPPSFFHHWMFIPFFTFWFSITTTTIGIBCGSHWTMPWMWB
# MPIIIFCFTFBMWPWCTMPMIGMGMBPWGPSPSWIHSCBBMBITTPHBIWTSHHBTFMFCHISTFGIBGS
# CCIGGSGGCFBFSBISIHFBMSSTGBHSMWMCMGMPGPWHBISPMPPSSCGTMICPISIIIMBCFTGPMG
# BTFMTGCSFWWMFCWGHFIGISWMFISMFHSGCTWIIMMFSSFHPIGTCFBPCSTIHMITTSMMHFMGIG"""

# m = text.splitlines()
# nrows = len(m)
# ncols = len(m[0])
# best = float("inf"), 0, 0
# for r in range(nrows):
#     for c in range(ncols):
#         distances = collections.defaultdict(lambda: float("inf"))
#         for r2 in range(nrows):
#             for c2 in range(ncols):
#                 ch = m[r2][c2]
#                 distances[ch] = min(distances[ch], abs(r - r2) + abs(c - c2))
#         # print(distances)
#         d = sum(distances.values())
#         best = min(best, (d, r + 1, c + 1))
# print(best)


@decrypter.decrypter(chapter=47)
def decrypt(cipher: str) -> str:
    return decrypter.substitution_cipher(
        cipher, "Seat Thirty-One (31) at Table Twenty-Seven (27)."
    )
